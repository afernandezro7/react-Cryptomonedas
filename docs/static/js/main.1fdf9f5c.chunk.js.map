{"version":3,"sources":["assets/cryptomonedas.png","hooks/useMoneda.js","hooks/useCriptomoneda.js","helpers/consultarAPI.js","components/Error.js","components/Form.js","components/Cotizacion.js","components/Spinner.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","StLabel","styled","label","StSelect","select","useMoneda","state","opciones","useState","estado","setEstado","handleChange","target","value","onChange","map","codigo","nombre","key","useCriptomoneda","CoinInfo","Name","Id","FullName","AxiosAPI","moneda","a","url","encodeURI","axios","get","resultado","helperCalcularCrypto","cryptomoneda","StMensajeError","p","Error","msg","StButton","input","Form","setMoneda","setCryptomoneda","setSpinner","listacripto","setlistacripto","error","setError","SelectMonedas","cripto","SelectCripto","useEffect","then","data","Response","Data","onSubmit","e","preventDefault","setTimeout","type","StResultadoDiv","div","StInfo","StPrecio","Cotizacion","cotizacion","Object","keys","length","PRICE","HIGHDAY","LOWDAY","CHANGEPCT24HOUR","LASTUPDATE","Spinner","className","StContainer","StImage","img","StHeading","h1","App","setCotizacion","spinner","DISPLAY","src","imagen","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.1fdf9f5c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cryptomonedas.96e45d69.png\";","import React, { useState } from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\n/** STYLED COMPONENTS **/\r\nconst StLabel = styled.label`\r\n    font-family: 'Bebas Neue', cursive;\r\n    color: #ffffff;\r\n    text-transform: uppercase;\r\n    font-weight: bold;\r\n    font-size: 2.4rem;\r\n    margin-top: 2rem;\r\n    display: block;\r\n`;\r\nconst StSelect = styled.select`\r\n    width: 100%;\r\n    display: block;\r\n    padding: 1rem;\r\n    -webkit-appearance: none;\r\n    border-radius: 10px;\r\n    border: none;\r\n    font-size: 1.2rem;\r\n`;\r\n\r\n\r\n\r\n/** CUSTOM HOOK **/\r\nconst useMoneda = ( label, state, opciones )=>{\r\n\r\n    // State del custom Hook\r\n    const [estado, setEstado] = useState(state)\r\n\r\n    // Manejar el Select Handlechange\r\n    const handleChange = ( { target } )=>{\r\n        setEstado(target.value)\r\n       \r\n    }\r\n\r\n    const Seleccionar = ( )=> (\r\n        <>\r\n            <StLabel> {label} </StLabel>\r\n            <StSelect\r\n                onChange={ handleChange }\r\n                value = { estado }\r\n            >\r\n                <option value=\"\">-- Seleccione --</option>\r\n                { opciones.map( ({ codigo, nombre}) => (\r\n\r\n                    <option value={ codigo } key={codigo}>{ nombre }</option>\r\n\r\n                ))}\r\n            </StSelect>\r\n        </>\r\n    );\r\n\r\n    return [estado, Seleccionar, setEstado]\r\n}\r\n\r\nexport default useMoneda;","import React, { useState } from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\n/** STYLED COMPONENTS **/\r\nconst StLabel = styled.label`\r\n    font-family: 'Bebas Neue', cursive;\r\n    color: #ffffff;\r\n    text-transform: uppercase;\r\n    font-weight: bold;\r\n    font-size: 2.4rem;\r\n    margin-top: 2rem;\r\n    display: block;\r\n`;\r\nconst StSelect = styled.select`\r\n    width: 100%;\r\n    display: block;\r\n    padding: 1rem;\r\n    -webkit-appearance: none;\r\n    border-radius: 10px;\r\n    border: none;\r\n    font-size: 1.2rem;\r\n`;\r\n\r\n\r\n\r\n/** CUSTOM HOOK **/\r\nconst useCriptomoneda = ( label, state, opciones )=>{\r\n\r\n\r\n    // State del custom Hook\r\n    const [estado, setEstado] = useState(state)\r\n\r\n    // Manejar el Select Handlechange\r\n    const handleChange = ( { target } )=>{\r\n        setEstado(target.value)\r\n\r\n    }\r\n\r\n    const SelectCripto = ()=> (\r\n        <>\r\n            <StLabel> {label} </StLabel>\r\n            <StSelect\r\n                onChange={ handleChange }\r\n                value = { estado }\r\n            >\r\n                <option value=\"\">-- Seleccione --</option>\r\n                { \r\n                        opciones.map( ({ CoinInfo}) => (\r\n\r\n                            <option value={ CoinInfo.Name } key={CoinInfo.Id}>{ CoinInfo.FullName }</option>\r\n\r\n                        )) \r\n                }\r\n            </StSelect>\r\n        </>\r\n    );\r\n\r\n    return [estado, SelectCripto, setEstado]\r\n}\r\n\r\nexport default useCriptomoneda;","import axios from 'axios'\r\n\r\nexport const AxiosAPI = async(moneda) => {\r\n   \r\n    const APIKey = '89749fd8de79ba4afa80275ee8e47d02bbf3ff80d94c0f8d2f705e43d6e95b74';\r\n    \r\n    const url = `https://min-api.cryptocompare.com/data/top/mktcapfull?limit=10&tsym=${ encodeURI(moneda) }&api_key=${encodeURI(APIKey)}`;\r\n    \r\n    \r\n    const resultado = await axios.get(url)\r\n    \r\n    return resultado;\r\n}\r\n\r\nexport const helperCalcularCrypto = async(moneda,cryptomoneda) => {\r\n   \r\n    const APIKey = '89749fd8de79ba4afa80275ee8e47d02bbf3ff80d94c0f8d2f705e43d6e95b74';\r\n    \r\n    const url = `https://min-api.cryptocompare.com/data/pricemultifull?fsyms=${ encodeURI(cryptomoneda) }&tsyms=${ encodeURI(moneda) }&api_key=${encodeURI(APIKey)}`;\r\n    \r\n    \r\n    const resultado = await axios.get(url)\r\n    \r\n    return resultado;\r\n}\r\n","import React from 'react'\r\nimport styled from '@emotion/styled';\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\n/** STYLED COMPONENTS **/\r\nconst StMensajeError = styled.p`\r\n    background-color: #b7322c;\r\n    padding: 1rem;\r\n    color: #ffffff;\r\n    font-size: 30px;\r\n    text-transform: uppercase;\r\n    font-weight: bold;\r\n    text-align: center;\r\n    font-family: 'Bebas Neue', cursive;\r\n`;\r\n\r\n\r\n\r\n/** GLOBAL FUNCTIONAL COMPONENT **/\r\nconst Error = ( { msg } ) => {\r\n    return (\r\n        <StMensajeError>\r\n            { msg }\r\n        </StMensajeError>\r\n    )\r\n}\r\n\r\nError.propTypes = {\r\n    msg: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Error\r\n","import React, { useEffect, useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport styled from '@emotion/styled';\r\nimport useMoneda from '../hooks/useMoneda';\r\nimport useCriptomoneda from '../hooks/useCriptomoneda';\r\nimport { AxiosAPI } from '../helpers/consultarAPI';\r\nimport Error from './Error';\r\n\r\n\r\n\r\n/** STYLED COMPONENTS **/\r\nconst StButton = styled.input`\r\n    margin-top: 20px;\r\n    font-weight: bold;\r\n    font-size: 20px;\r\n    padding: 10px;\r\n    background-color: #66a2fe;\r\n    border: none;\r\n    border-radius: 10px;\r\n    color: #ffffff;\r\n    transition: background-color .3s ease;\r\n    width: 100%;\r\n\r\n    &:hover{\r\n        background-color: #326AC0;\r\n        cursor: pointer;\r\n    }\r\n`;\r\n\r\n\r\n/** FUNCTIONAL COMPONENT **/\r\nconst Form = ({setMoneda,setCryptomoneda,setSpinner}) => {\r\n\r\n    // Arreglo de Monedas\r\n    const monedas =[\r\n        { codigo:  'USD', nombre: 'Dolar Estadounidense'},\r\n        { codigo:  'MXN', nombre: 'Peso Mexicano'},\r\n        { codigo:  'EUR', nombre: 'Euro'},\r\n        { codigo:  'GBP', nombre: 'Libras Esterlinas'},\r\n        { codigo:  'PAB', nombre: 'Balboa Panameño'}\r\n    ]\r\n    // State con Arreglo de Cryptomonedas\r\n    const [listacripto, setlistacripto] = useState([])\r\n    \r\n    // State de Error al validar el Submit\r\n    const [error, setError] = useState(false)\r\n\r\n    // Utilizar CustomHook useMoneda\r\n    const [moneda , SelectMonedas] = useMoneda('Elige tu Moneda', '', monedas)\r\n    // Utilizar CustomHook useCriptomoneda\r\n    const [cripto , SelectCripto] = useCriptomoneda('Elige tu Cryptomoneda', '', listacripto)\r\n    \r\n    \r\n    useEffect(() => {\r\n        \r\n\r\n        AxiosAPI(moneda)\r\n            .then(  ({ data }) =>{\r\n\r\n                (data.Response===\"Error\") ? setlistacripto([]) : setlistacripto(data.Data)\r\n\r\n                \r\n            })\r\n\r\n        \r\n        \r\n       \r\n    }, [moneda])\r\n\r\n    const handleSubmit = e =>{\r\n        e.preventDefault();\r\n        \r\n        // Validar formulario\r\n        if( cripto === \"\" || moneda === \"\"){\r\n            setError(true)\r\n\r\n            return\r\n        }\r\n        setError(false)\r\n\r\n        //Pasar el resultado al componente principal\r\n        setMoneda(moneda)\r\n        setCryptomoneda(cripto)\r\n        \r\n        //Mostrar y ocultar el Spinner de cargando\r\n        setSpinner(true)\r\n        setTimeout(() => {\r\n            setSpinner(false) \r\n        }, 2500);\r\n    }\r\n\r\n    \r\n    return (\r\n        <form\r\n        onSubmit={ handleSubmit }\r\n        >   \r\n            { error && <Error msg='Todos lo campos son obligatorios'/> }\r\n            <SelectMonedas/>\r\n            <SelectCripto/>\r\n            <StButton\r\n                type=\"submit\"\r\n                value= \"Calcular\"\r\n            />\r\n            \r\n        </form>\r\n    )\r\n}\r\n\r\nForm.propTypes = {\r\n    setMoneda: PropTypes.func.isRequired,\r\n    setCryptomoneda: PropTypes.func.isRequired,\r\n    setSpinner: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Form\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport styled from '@emotion/styled'\r\n\r\n/** STYLED COMPONENTS **/\r\nconst StResultadoDiv = styled.div`\r\n    color: #fff;\r\n    font-family: Arial, Helvetica, sans-serif;\r\n\r\n`;\r\nconst StInfo = styled.p`\r\n    font-size: 18px;\r\n\r\n    span{\r\n        font-weight: bold;\r\n    }\r\n`;\r\nconst StPrecio = styled.p`\r\n    font-size: 30px;\r\n\r\n    span{\r\n        font-weight: bold;\r\n    }\r\n`;\r\n\r\n\r\n\r\n/** FUNCTIONAL COMPONENT **/\r\nconst Cotizacion = ({cotizacion}) => {\r\n\r\n    if(Object.keys(cotizacion).length === 0) return null;\r\n\r\n    const { PRICE, HIGHDAY, LOWDAY, CHANGEPCT24HOUR, LASTUPDATE} = cotizacion\r\n\r\n    return (\r\n        <StResultadoDiv>\r\n            <StPrecio>El precio es: <span>{ PRICE }</span></StPrecio> \r\n            <StInfo>Precio más alto del día: <span>{ HIGHDAY }</span></StInfo> \r\n            <StInfo>Precio más bajo del día: <span>{ LOWDAY }</span></StInfo> \r\n            <StInfo>Variación últimas 24h: <span>{ CHANGEPCT24HOUR }</span></StInfo> \r\n            <StInfo>Última Actualización: <span>{ LASTUPDATE }</span></StInfo> \r\n        </StResultadoDiv>\r\n    )\r\n}\r\n\r\nCotizacion.propTypes = {\r\n    cotizacion: PropTypes.object.isRequired\r\n}\r\n\r\nexport default Cotizacion\r\n","import React from 'react'\r\nimport './Spinner.css'\r\n\r\n\r\nconst Spinner = () => {\r\n    return (\r\n        <div className=\"sk-chase\">\r\n          <div className=\"sk-chase-dot\"></div>\r\n          <div className=\"sk-chase-dot\"></div>\r\n          <div className=\"sk-chase-dot\"></div>\r\n          <div className=\"sk-chase-dot\"></div>\r\n          <div className=\"sk-chase-dot\"></div>\r\n          <div className=\"sk-chase-dot\"></div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Spinner\r\n","import React, { useEffect, useState } from 'react';\nimport styled from '@emotion/styled';\nimport imagen from './assets/cryptomonedas.png'\nimport Form from './components/Form';\nimport { helperCalcularCrypto } from './helpers/consultarAPI';\nimport Cotizacion from './components/Cotizacion';\nimport Spinner from './components/Spinner';\n\n/** STYLED COMPONENTS **/\nconst StContainer = styled.div`\n  max-width: 900px;\n  margin: 0 auto;\n  @media (min-width:992px){\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    column-gap: 2rem;\n  }\n\n`;\n\nconst StImage = styled.img`\n  max-width: 100%;\n  margin-top: 5rem;\n`;\n\nconst StHeading = styled.h1`\n  color: #ffffff;\n  font-family: 'Bebas Neue', cursive;\n  font-size: 50px;\n  font-weight: 700;\n  margin-bottom: 50px;\n  margin-top: 80px;\n  text-align: center;\n\n  &::after {\n    background-color: #66a2fe;\n    content: '';\n    display: block;\n    height: 6px;\n    \n  }\n`;\n\n/** GLOBAL FUNCTIONAL COMPONENT **/\nfunction App() {\n\n  const [moneda, setMoneda] = useState('')\n  const [cryptomoneda, setCryptomoneda] = useState('')\n  const [cotizacion, setCotizacion] = useState({})\n  const [spinner, setSpinner] = useState(false)\n\n  useEffect(() => {\n    //evitar primera ejecución\n    if(moneda === '') return;\n\n    // Consultar la API para obtener la cotización\n    helperCalcularCrypto(moneda,cryptomoneda)\n      .then( ( {data} )=>{\n\n        setCotizacion(data.DISPLAY[cryptomoneda][moneda]);\n      })\n\n  }, [moneda,cryptomoneda])\n\n  return (\n    <StContainer>\n      <div>\n        <StImage\n            src = { imagen }\n            alt= \"imagen Crypto\"\n        />\n      </div>\n      <div>\n\n        <StHeading>Cotiza Cryptomonedas al Instante</StHeading>\n\n        <Form \n          setMoneda={ setMoneda } \n          setCryptomoneda={ setCryptomoneda } \n          setSpinner = { setSpinner }\n        />\n        { spinner \n            ? \n              <Spinner/>\n            :\n              <Cotizacion\n                cotizacion = {cotizacion}\n              />\n        }\n        \n      </div>\n      \n    </StContainer>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}